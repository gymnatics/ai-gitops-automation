apiVersion: v1
kind: ServiceAccount
metadata:
  name: wait-for-crds
  annotations:
    argocd.argoproj.io/sync-wave: "15"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: wait-for-crds
  annotations:
    argocd.argoproj.io/sync-wave: "15"
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - namespaces
    verbs:
      - get
      - list
  - apiGroups:
      - operators.coreos.com
    resources:
      - clusterserviceversions
      - subscriptions
    verbs:
      - get
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: wait-for-crds
  annotations:
    argocd.argoproj.io/sync-wave: "15"
subjects:
  - kind: ServiceAccount
    name: wait-for-crds
    namespace: redhat-ods-applications
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: wait-for-crds
---
apiVersion: batch/v1
kind: Job
metadata:
  name: wait-for-crds
  annotations:
    argocd.argoproj.io/sync-wave: "16"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      containers:
        - name: wait
          image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for OpenShift AI operator to be ready..."
              
              # First wait for the operator namespace
              until oc get namespace redhat-ods-operator &>/dev/null; do
                echo "Waiting for redhat-ods-operator namespace..."
                sleep 5
              done
              
              # Wait for the operator CSV to be succeeded
              echo "Waiting for OpenShift AI operator to be ready..."
              until oc get csv -n redhat-ods-operator | grep -E "rhods-operator.*Succeeded" &>/dev/null; do
                echo "Waiting for OpenShift AI operator CSV to succeed..."
                sleep 10
              done
              
              # Wait for operator pod to be running
              echo "Waiting for operator pod to be running..."
              until oc get pods -n redhat-ods-operator -l name=rhods-operator --field-selector=status.phase=Running | grep -q Running; do
                echo "Waiting for operator pod to be in Running state..."
                sleep 10
              done
              
              echo "Operator is running. Waiting for CRDs to be created..."
              
              # List of required CRDs
              REQUIRED_CRDS=(
                "datascienceclusters.datasciencecluster.opendatahub.io"
                "dscinitializations.dscinitialization.opendatahub.io"
                "odhdashboardconfigs.opendatahub.io"
                "acceleratorprofiles.dashboard.opendatahub.io"
              )
              
              # Wait for each CRD with timeout
              for crd in "${REQUIRED_CRDS[@]}"; do
                echo "Checking for CRD: $crd"
                ATTEMPTS=0
                MAX_ATTEMPTS=30
                until oc get crd "$crd" &>/dev/null; do
                  echo "Waiting for CRD $crd to be created... (attempt $ATTEMPTS/$MAX_ATTEMPTS)"
                  sleep 10
                  ATTEMPTS=$((ATTEMPTS + 1))
                  if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
                    echo "ERROR: Timeout waiting for CRD $crd"
                    echo "Checking operator logs:"
                    oc logs -n redhat-ods-operator -l name=rhods-operator --tail=50
                    exit 1
                  fi
                done
                echo "âœ“ CRD $crd is available"
              done
              
              echo "All required CRDs are available. Proceeding with instance creation."
      restartPolicy: Never
      serviceAccount: wait-for-crds
      serviceAccountName: wait-for-crds
  backoffLimit: 4
